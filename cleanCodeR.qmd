---
title: "Clean Code in R"
format:
  html:
    theme: flatly
    toc: true
execute:
  echo: false  # Hides raw code output
highlight-style: github  # Syntax highlighting (changeable)
---

```{r}
library(glue)

makeExampleBox <- function(label, icon, color, border_color, code) {
  glue(
    '<div style="background-color: {color}; padding: 10px; border-left: 5px solid {border_color}; margin-bottom: 10px;">',
    '<b>{icon} {label}:</b>',
    '<pre><code>{code}</code></pre>',
    '</div>'
  )
}

makeBadBox <- function(code){
 makeExampleBox("Bad", "❌", color = "#ffdddd", "red" ,code)
}

makeGoodBox <- function(code){
 makeExampleBox("Good", "⚠️", "#fff3cd", "orange", code)
}

makeBestBox <- function(code){
 makeExampleBox("Best", "✅", "#d4edda", "green", code)
}
```

```{r, eval=FALSE, results='asis'}
makeBadBox('head(mtcars)')
makeGoodBox('head(mtcars)')
makeBestBox('head(mtcars)')
```

## Intro

Code is clean if it can be understood easily – by everyone on the team - and future you! With understandability comes readability, changeability, extensibility and maintainability. Clean code comes from many iterations of failing and practice. Just like in college, your best papers probably came from many revisions. Think of refactoring your code as editing your paper - it's never perfect the first shot!

I will share tips and examples I've learned mainly from Robert Martin - AKA "Uncle Bob". I will be using R to demonstrate examples.

Why?

_____________________________________

## Key Takeaways
1. Follow standard naming conventions of variables and functions.
2. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.
3. Boy scout rule. Leave the campground cleaner than you found it.

Change one variable name for the better, break up one function that’s a little too large, eliminate one small bit of
duplication, clean up one composite if statement. 

4. Always look for the root cause of a problem.

## Use Meaningful Names

```{r, results='asis', echo=FALSE}
makeBadBox('FlwRt()
date = "2024-01-01" # date project started')
makeGoodBox('FURate()
startDate = "2024-01-01" # of the project')
makeBestBox('calcFollowupRate()
projectStartDate = "2024-01-01"')
```

### Choose descriptive and unambiguous names
The name of a variable, function, or class, should answer all the big questions. It
should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent

### Make meaningful distinction.

### Use pronounceable names.

### Use searchable names.

### Replace magic numbers with named constants.
### Avoid encodings. Don't append prefixes or type information.

## Design rules
1. Keep configurable data at high levels.
2. Prefer polymorphism to if/else or switch/case.
3. Separate multi-threading code.
4. Prevent over-configurability.
5. Use dependency injection.
6. Follow Law of Demeter. A class should know only its direct dependencies.

## Understandability tips
1. Be consistent. If you do something a certain way, do all similar things in the same way.
2. Use explanatory variables.
3. Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.
4. Prefer dedicated value objects to primitive type.
5. Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.
6. Avoid negative conditionals.



## Functions rules
1. Small.
2. Do one thing.
3. Use descriptive names.
4. Prefer fewer arguments.
5. Have no side effects.
6. Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.

## Comments rules
1. Always try to explain yourself in code.
2. Don't be redundant.
3. Don't add obvious noise.
4. Don't use closing brace comments.
5. Don't comment out code. Just remove.
6. Use as explanation of intent.
7. Use as clarification of code.
8. Use as warning of consequences.

## Source code structure
1. Separate concepts vertically.
2. Related code should appear vertically dense.
3. Declare variables close to their usage.
4. Dependent functions should be close.
5. Similar functions should be close.
6. Place functions in the downward direction.
7. Keep lines short.
8. Don't use horizontal alignment.
9. Use white space to associate related things and disassociate weakly related.
10. Don't break indentation.

## Objects and data structures
1. Hide internal structure.
2. Prefer data structures.
3. Avoid hybrids structures (half object and half data).
4. Should be small.
5. Do one thing.
6. Small number of instance variables.
7. Base class should know nothing about their derivatives.
8. Better to have many functions than to pass some code into a function to select a behavior.
9. Prefer non-static methods to static methods.

## Tests
1. One assert per test.
2. Readable.
3. Fast.
4. Independent.
5. Repeatable.

## Code smells
1. Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.
2. Fragility. The software breaks in many places due to a single change.
3. Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.
4. Needless Complexity.
5. Needless Repetition.
6. Opacity. The code is hard to understand.